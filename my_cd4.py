from config import TOKEN_BOT as TOKEN
from config import presentation_text
from config import about_
from config import commands
from config import UKRAINIAN_ALPHABET

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton  # inline
"""
   InlineKeyboardMarkup —Ç–∞ InlineKeyboardButton - —Ü—ñ –∫–ª–∞—Å–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∑–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
—ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö (—ñ–Ω–ª–∞–π–Ω) –∫–ª–∞–≤—ñ–∞—Ç—É—Ä. –í–æ–Ω–∏ –¥–æ–∑–≤–æ–ª—è—é—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –¥—ñ—è–º–∏, —è–∫—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
–º–æ–∂–µ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ –ø—ñ–¥ —á–∞—Å –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º.
"""
import random
from aiogram import Bot, Dispatcher, types
# Bot, Dispatcher, —Ç–∞ types - —Ü—ñ –∫–ª–∞—Å–∏ —Ç–∞ –æ–±'—î–∫—Ç–∏ –∑ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ aiogram –¥–æ–∑–≤–æ–ª—è—é—Ç—å
# —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ API Telegram —Ç–∞ –æ–±—Ä–æ–±–ª—è—Ç–∏ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –ø–æ–¥—ñ–π. Bot - —Ü–µ –æ–±'—î–∫—Ç –±–æ—Ç–∞,
# Dispatcher - –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π, –∞ types - –∫–ª–∞—Å–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ä–æ–±–æ—Ç–∏ –∑ —Ç–∏–ø–∞–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
# —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞–º–∏.

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
# ReplyKeyboardMarkup —Ç–∞ KeyboardButton - —Ü—ñ –∫–ª–∞—Å–∏ –¥–æ–∑–≤–æ–ª—è—é—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
# –∑ –∫–Ω–æ–ø–∫–∞–º–∏, —è–∫—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º. –í–æ–Ω–∏ –¥–æ–∑–≤–æ–ª—è—é—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏
# –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
from aiogram.contrib.middlewares.logging import LoggingMiddleware
# LoggingMiddleware - —Ü–µ–π –∫–ª–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π —Ç–∞ –¥—ñ–π, —è–∫—ñ –≤—ñ–¥–±—É–≤–∞—é—Ç—å—Å—è –≤ –±–æ—Ç—ñ.
# –í—ñ–Ω –¥–æ–ø–æ–º–∞–≥–∞—î –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø–æ–¥—ñ—ó –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏ —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞.

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
"""
dp = Dispatcher(bot) -  –æ–±'—î–∫—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (Dispatcher) - –ø–æ–≤'—è–∑—É—î–º–æ –π–æ–≥–æ –∑ –±–æ—Ç–æ–º. 
 –î–∏—Å–ø–µ—Ç—á–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –æ–±—Ä–æ–±–∫—É —Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å,
—è–∫—ñ –Ω–∞–¥—Ö–æ–¥—è—Ç—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–æ—Ç–∞.
"""


# Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging_middleware = LoggingMiddleware()
dp.middleware.setup(logging_middleware)
"""
  logging_middleware = LoggingMiddleware() - –¶–µ–π —Ä—è–¥–æ–∫ —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è 
(LoggingMiddleware). Middleware - —Ü–µ –ø—Ä–æ–º—ñ–∂–Ω–∏–π —à–∞—Ä, —è–∫–∏–π –º–æ–∂–µ –æ–±—Ä–æ–±–ª—è—Ç–∏ —ñ –ª–æ–≥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥ —Ç–∏–º,
 —è–∫ –≤–æ–Ω–∏ –¥–æ—Å—è–≥–Ω—É—Ç—å –æ–±—Ä–∞–Ω–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. 
 –í –¥–∞–Ω–æ–º—É –≤–∏–ø–∞–¥–∫—É, middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –¥–ª—è –∑–∞–ø–∏—Å—É –ª–æ–≥—ñ–≤, 
 —â–æ –¥–æ–ø–æ–º–æ–∂–µ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –±–æ—Ç–∞ —Ç–∞ –≤–∏—è–≤–ª—è—Ç–∏ –º–æ–∂–ª–∏–≤—ñ –ø–æ–º–∏–ª–∫–∏.

  dp.middleware.setup(logging_middleware) - –¶—è –ª—ñ–Ω—ñ—è –¥–æ–¥–∞—î middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ 
(Dispatcher). –¢–µ–ø–µ—Ä –±—É–¥—å-—è–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ–¥—ñ—ó, —è–∫—ñ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –±–æ—Ç–æ–º, –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ
–≤ –∂—É—Ä–Ω–∞–ª—ñ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è.
"""



# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ "CODE" —ñ "DECODE"
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üîê CODE"),
            KeyboardButton(text="üîì DECODE"),
        ],
        [
            KeyboardButton(text="‚ÑπÔ∏è About"),
            KeyboardButton(text="üÜò Help"),
            KeyboardButton(text="üêç Presentation"),
        ],
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

def coder(inp_str):
    code_caesar = random.randint(1, 30)  # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ–¥
    coder_inp_str = ""
    for char in inp_str:
        if char in UKRAINIAN_ALPHABET:
            index = UKRAINIAN_ALPHABET.index(char)
            new_index = index + code_caesar
            if new_index >= len(UKRAINIAN_ALPHABET):
                new_index -= len(UKRAINIAN_ALPHABET)
            coder_inp_str += UKRAINIAN_ALPHABET[new_index]
        else:
            coder_inp_str += char

    return code_caesar, coder_inp_str


# –†–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∞–ª–≥–æ—Ä–∏—Ç–º—É –¶–µ–∑–∞—Ä—è
def decoder(code_caesar, inp_str):
    decoded_text = ""
    for char in inp_str:
        if char in UKRAINIAN_ALPHABET:
            index = UKRAINIAN_ALPHABET.index(char)
            new_index = index - code_caesar
            if new_index < 0:
                new_index += len(UKRAINIAN_ALPHABET)
            decoded_char = UKRAINIAN_ALPHABET[new_index]
            decoded_text += decoded_char
        else:
            decoded_text += char

    return decoded_text


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤—ñ—Ç! \nü§¥ –Ø –¶–µ–∑–∞—Ä –±–æ—Ç!\nüêç –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)

    with open('Go-ITeens.jpg', 'rb') as photo:
        await message.reply_photo(photo=types.InputFile(photo))
"""
  @dp.message_handler(commands=['start']) - –¶–µ–π —Ä—è–¥–æ–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–º–∞–Ω–¥–∏
/start. –ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ü—é –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É, –≤—ñ–Ω –∞–∫—Ç–∏–≤—É—î —Ü–µ–π –æ–±—Ä–æ–±–Ω–∏–∫.

  async def start_command(message: types.Message): - –¶—è —Ñ—É–Ω–∫—Ü—ñ—è start_command –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–∞,
–∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start. –í–æ–Ω–∞ –ø—Ä–∏–π–º–∞—î –ø–∞—Ä–∞–º–µ—Ç—Ä message, 
—è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ—Ç—Ä–∏–º–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

  await message.reply("üëã –ü—Ä–∏–≤—ñ—Ç! \nü§¥ –Ø –¶–µ–∑–∞—Ä –±–æ—Ç!\nüêç –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard) 
- –¶–µ–π —Ä—è–¥–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É reply –æ–±'—î–∫—Ç–∞ message.
–£ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤–∫–∞–∑–∞–Ω–æ —Ç–µ–∫—Å—Ç, —è–∫–∏–π –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ. 
–¢–∞–∫–æ–∂, reply_markup=keyboard –≤–∫–∞–∑—É—î –Ω–∞ —Ç–µ, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É (keyboard),
—è–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó.
"""


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help
@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    help_text = "\n".join(commands)
    await message.reply(f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞ –¶–µ–∑–∞—Ä—è!\n–ö–æ–º–∞–Ω–¥–∏:\n\n{help_text}")


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /about
@dp.message_handler(commands=['about'])
async def about_command(message: types.Message):
    await message.reply(about_)


@dp.message_handler(commands=['presentation'])
async def send_presentation(message: types.Message):
    for i in range(0, len(presentation_text), 4096):
        await message.reply(presentation_text[i:i + 4096])


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "CODE"
@dp.message_handler(lambda message: message.text == "üîê CODE")
async def code_button(message: types.Message):
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–¥—É–≤–∞–Ω–Ω—è:")


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "DECODE"
@dp.message_handler(lambda message: message.text == "üîì DECODE")
async def decode_button(message: types.Message):
    await message.reply(
        "–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á —ñ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è \n–Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n 5       –æ–Ü.–ß6–©1 2, –©–Ü.—Ñ}–Ü—Ö–Ü –≥6–ª–Ü —Ü}6(}–Ü–≥4–ª–Ü–©–©–§7")


# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "CODE"
"""
 lambda message: message.text –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç, —Ç–æ–±—Ç–æ —á–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –Ω–µ —î 
–ø–æ—Ä–æ–∂–Ω—ñ–º —Ç–µ–∫—Å—Ç–æ–≤–∏–º —Ä—è–¥–∫–æ–º.

 –ü–æ—Ç—ñ–º, –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é message.text.split()[0].isdigit(), –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è, —á–∏ –ø–µ—Ä—à–∏–π —Å–ª–æ–≤–æ (–∞–±–æ —Å–ª–æ–≤–æ, —è–∫–µ —î –ø–µ—Ä—à–∏–º, —è–∫—â–æ 
—Ç–µ–∫—Å—Ç —Ä–æ–∑–¥—ñ–ª–µ–Ω–æ –ø—Ä–æ–±—ñ–ª–∞–º–∏) —î —á–∏—Å–ª–æ–º. isdigit() - —Ü–µ –º–µ—Ç–æ–¥ –¥–ª—è —Ä—è–¥–∫—ñ–≤, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ —Ä—è–¥–æ–∫ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –ª–∏—à–µ 
–∑ —Ü–∏—Ñ—Ä —ñ False –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É. –Ø–∫—â–æ –ø–µ—Ä—à–∏–π —Å–∏–º–≤–æ–ª (—Å–ª–æ–≤–æ) –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î —á–∏—Å–ª–æ–º, —Ç–æ —É–º–æ–≤–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, 
—ñ –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–µ —Å–ø—Ä–∞—Ü—å–æ–≤—É—î.

 –¢–∞–∫–æ–∂, —á–µ—Ä–µ–∑ and message.text not in ["‚ÑπÔ∏è About", "üÜò Help"] –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è, —â–æ–± —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –±—É–≤ –æ–¥–Ω–∏–º 
–∑ –¥–≤–æ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: "‚ÑπÔ∏è About" –∞–±–æ "üÜò Help". –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î –æ–¥–Ω–∏–º –∑ —Ü–∏—Ö –¥–≤–æ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤,
–æ–±—Ä–æ–±–Ω–∏–∫ —Ç–∞–∫–æ–∂ –Ω–µ —Å–ø—Ä–∞—Ü—å–æ–≤—É—î.
"""
@dp.message_handler(
    lambda message: message.text and not message.text.split()[0].isdigit() and message.text not in ["‚ÑπÔ∏è About", "üÜò Help",
                                                                                                    "üêç Presentation"])
async def code_text(message: types.Message):
    input_text = message.text
    key, coded_text = coder(input_text)
    coded_text_ = f"<b>{coded_text}</b>"

    if len(coded_text) <= 25:
        # –¢–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, —Å—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "DECODE"
        decode_button = InlineKeyboardButton("üîì DECODE", callback_data=f"decode_{key}_{coded_text}")
        keyboard = InlineKeyboardMarkup().add(decode_button)
        await message.reply(f"–ö–ª—é—á –ó–∞–∫–æ–¥–æ–≤–∞–Ω–∏–π_—Ç–µ–∫—Å—Ç:\n{key}        {coded_text_}", reply_markup=keyboard, parse_mode="HTML")
    else:
        # –¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –±–µ–∑ –∫–Ω–æ–ø–∫–∏
        await message.reply(f"–ö–ª—é—á –ó–∞–∫–æ–¥–æ–≤–∞–Ω–∏–π_—Ç–µ–∫—Å—Ç:\n{key}       {coded_text_}", parse_mode="HTML")


# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "DECODE"
@dp.message_handler(lambda message: len(message.text.split()) > 1 and message.text.split()[0].isdigit())
async def decode_text(message: types.Message):
    try:
        key, input_text = message.text.split(maxsplit=1)
        key = int(key)
        if key > 30:
            await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ö–ª—é—á –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º –Ω–µ –±—ñ–ª—å—à–µ 30.")
        else:
            decoded_text = decoder(key, input_text)
            decoded_text = '<b>' + decoded_text + '</b>'
            await message.reply(f"–†–æ–∑–∫–æ–¥–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:\n {decoded_text}",  parse_mode="HTML")
    except ValueError:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ <–∫–ª—é—á> <—Ç–µ–∫—Å—Ç>.")


# –û–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "DECODE"
@dp.callback_query_handler(lambda c: c.data.startswith('decode_'))
async def decode_callback(query: types.CallbackQuery):
    # –û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–∞–Ω—ñ –∑ callback-–∑–∞–ø–∏—Ç—É
    data = query.data.split('_')
    key = int(data[1])
    coded_text = data[2]

    # –í–∏–∫–æ–Ω–∞–π—Ç–µ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è
    decoded_text = decoder(key, coded_text)
    decoded_text = '<b>' + decoded_text + '</b>'

    # –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —á–∞—Ç
    # await query.answer(f"–†–æ–∑–∫–æ–¥–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:\n{decoded_text}") # –Ω–∞ —á—ë—Ä–Ω–æ–º —Ñ–æ–Ω–µ –æ–∫–Ω–æ
    await bot.send_message(query.from_user.id, f"–†–æ–∑–∫–æ–¥–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:\n{decoded_text}",  parse_mode="HTML")


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "About"
@dp.message_handler(lambda message: message.text == "‚ÑπÔ∏è About")
async def about_button(message: types.Message):
    await message.reply(about_)


# @dp.message_handler(lambda message: message.text == "About")
# async def about_button(message: types.Message):
#     await message.reply(about_, parse_mode="HTML")


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "Help"
@dp.message_handler(lambda message: message.text == "üÜò Help")
async def help_button(message: types.Message):
    help_text = "\n".join(commands)
    await message.reply(f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞ –¶–µ–∑–∞—Ä—è!\n–ö–æ–º–∞–Ω–¥–∏:\n\n{help_text}")


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "Presentation"
# @dp.message_handler(lambda message: message.text == "Presentation")
# async def presentation_button(message: types.Message):
#     await message.reply(presentation_text)
@dp.message_handler(lambda message: message.text == "üêç Presentation")
async def presentation_button(message: types.Message):
    await message.reply(presentation_text, parse_mode="HTML")


if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)
